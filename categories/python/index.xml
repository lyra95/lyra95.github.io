<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on ZDoc</title>
    <link>https://lyra95.github.io/categories/python/</link>
    <description>Recent content in python on ZDoc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Fri, 11 Jun 2021 18:31:49 +0900</lastBuildDate>
    
        <atom:link href="https://lyra95.github.io/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>Flask로 Restful Api (1): 기본 API</title>
        <link>https://lyra95.github.io/docs/flask/rest-api-1/</link>
        <pubDate>Fri, 11 Jun 2021 18:31:49 +0900</pubDate>
        
        <guid>https://lyra95.github.io/docs/flask/rest-api-1/</guid>
        <description>Restful Api란? 특정 약속으로 정해놓은 server-client application 규약이다.
HTTP( or HTTPS) 통신을 이용하여 server와 client간 데이터를 주고받는다.
보통 4가지 오퍼레이션이 있다: get, put, post, delete. 각각 Read, Update, Create, Delete에 대응된다고 보면된다.
예를들어서, 학생들 성적을 관리하는 서버가 있다고 치자. 1번 학생의 성적을 보고 싶다면 get https://{서버주소}/students/1 이런식으로 요청한다. 무엇을 하려고 하는지 링크(URI)자체로 설명이 되고 있다.
그외에도 stateless, cache 등등 여러가지 규약이 있는데, (https://restfulapi.net/)[https://restfulapi.net/]를 참고하는게 더 좋을 것이다.
간단한 server-client application을 쉽게 찍어내기 위한 설계도라고 이해하면 될 것 같다.</description>
      </item>
      
      <item>
        <title>@staticmethod 와 @classmethod의 차이</title>
        <link>https://lyra95.github.io/docs/python/python1/</link>
        <pubDate>Sat, 15 May 2021 16:13:15 +0900</pubDate>
        
        <guid>https://lyra95.github.io/docs/python/python1/</guid>
        <description>출처
둘 다 클래스 인스턴스를 생성하지 않고 메서드를 사용하는 법(정적메서드)과 관련되어있다.
@staticmethod 1 2 3 4 5 6 7 8 9 10 11  class Test : num = 0 @staticmethod def add (x, y) : return x + y print(Test.add(1,1)) t = Test() print(t.add(1,1)) # allowed, but not recommended   객체를 통한 정적메소드 접근은 C#에서는 에러, Java, C++에서는 warning이라고 한다.
1 2 3 4 5 6 7 8 9 10 11  class Test : num = 0 @staticmethod def add (x, y) : return x + y + self.</description>
      </item>
      
      <item>
        <title>Flask로 Restful Api (2): reqparse로 요청 파싱하기</title>
        <link>https://lyra95.github.io/docs/flask/rest-api-2/</link>
        <pubDate>Fri, 11 Jun 2021 18:31:49 +0900</pubDate>
        
        <guid>https://lyra95.github.io/docs/flask/rest-api-2/</guid>
        <description>전체코드 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63  #main.py from flask import Flask from flask_restful import Api, Resource, reqparse, abort from flask_caching import Cache import time app = Flask(__name__) api = Api(app) config = { &amp;#34;DEBUG&amp;#34;: True, # some Flask specific configs &amp;#34;CACHE_TYPE&amp;#34;: &amp;#34;SimpleCache&amp;#34;, # Flask-Caching related configs &amp;#34;CACHE_DEFAULT_TIMEOUT&amp;#34;: 300 } app.</description>
      </item>
      
      <item>
        <title>if __name__ == &#39;__main__&#39;: 이 뭘까</title>
        <link>https://lyra95.github.io/docs/python/python2/</link>
        <pubDate>Sat, 15 May 2021 16:13:15 +0900</pubDate>
        
        <guid>https://lyra95.github.io/docs/python/python2/</guid>
        <description>__name__은 모듈 이름을 나타낸다. main 모듈일 경우 모듈이름은 main이된다.
자세히 알아보기 위해 main.py랑 hello.py가 다음과 같이 있다 치자.
1 2 3 4  #hello.py def foo(): print(&amp;#34;hello.py : &amp;#34; + __name__) foo()   1 2 3 4  #main.py import &amp;#34;hello.py&amp;#34; print(&amp;#34;main.py : &amp;#34; + __name__)   main.py를 실행하면 다음과 같다.
1 2 3  PS C:\dev\ml&amp;gt; &amp;amp; &amp;#34;C:/Program Files/Python39/python.exe&amp;#34; c:/dev/ml/main.py hello.py : hello main.py : __main__   hello.</description>
      </item>
      
      <item>
        <title>Flask로 Restful Api (3): 캐시 설정하기</title>
        <link>https://lyra95.github.io/docs/flask/rest-api-3/</link>
        <pubDate>Fri, 11 Jun 2021 18:31:49 +0900</pubDate>
        
        <guid>https://lyra95.github.io/docs/flask/rest-api-3/</guid>
        <description>전체코드 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63  #main.py from flask import Flask from flask_restful import Api, Resource, reqparse, abort from flask_caching import Cache import time app = Flask(__name__) api = Api(app) config = { &amp;#34;DEBUG&amp;#34;: True, # some Flask specific configs &amp;#34;CACHE_TYPE&amp;#34;: &amp;#34;SimpleCache&amp;#34;, # Flask-Caching related configs &amp;#34;CACHE_DEFAULT_TIMEOUT&amp;#34;: 300 } app.</description>
      </item>
      
      <item>
        <title>*args와 **kwargs</title>
        <link>https://lyra95.github.io/docs/python/python3/</link>
        <pubDate>Sat, 15 May 2021 16:13:15 +0900</pubDate>
        
        <guid>https://lyra95.github.io/docs/python/python3/</guid>
        <description>*args는 파라미터를 여러개(정해지지 않은 갯수)로 받을 때 쓴다.
굳이 이름이 args일 필요는 없다. *Namelist 이렇게 써도 된다.
타입을 출력해보면 args는 tuple임을 알 수 있다.
**kwargs도 파라미터를 여러개(정해지지 않은 갯수)로 받을 때 쓴다. 차이점은 dict형태로 받는다는 것이다.
얘도 굳이 이름이 kwargs일 필요는 없다.
1 2 3 4 5 6 7 8 9 10 11  def fo(*names): print(type(names),names) for n in names: print(n) def foo(**names): print(type(names),names) for k,v in names.items(): print(k,v) fo(&amp;#34;a&amp;#34;,1,True) foo(a=1,b=True,c=&amp;#34;c&amp;#34;)   1 2 3 4 5 6 7 8  &amp;lt;class &amp;#39;tuple&amp;#39;&amp;gt; (&amp;#39;a&amp;#39;, 1, True) a 1 True &amp;lt;class &amp;#39;dict&amp;#39;&amp;gt; {&amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: True, &amp;#39;c&amp;#39;: &amp;#39;c&amp;#39;} a 1 b True c c   </description>
      </item>
      
      <item>
        <title>Flask로 Restful Api (4): sqlAlchemy로 DB와 연동하기</title>
        <link>https://lyra95.github.io/docs/flask/rest-api-4/</link>
        <pubDate>Fri, 11 Jun 2021 18:31:49 +0900</pubDate>
        
        <guid>https://lyra95.github.io/docs/flask/rest-api-4/</guid>
        <description>전체코드 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83  # main.</description>
      </item>
      
      <item>
        <title>CLI argument parsing : argparse</title>
        <link>https://lyra95.github.io/docs/python/argparse/</link>
        <pubDate>Sun, 16 May 2021 17:28:58 +0900</pubDate>
        
        <guid>https://lyra95.github.io/docs/python/argparse/</guid>
        <description>개요 간단한 계산기 프로그램을 예로 들어 설명한다.
CLI에서 python main.py -op sum 1 2 3이런 식으로 프로그램에 인풋을 주고 싶다고 하자. (결과는 6을 출력하도록)
sum, mul 함수 작성 (skip) 일단 argparse랑은 상관 없는 sum,mul함수를 작성한다.
1 2 3 4 5 6 7 8 9 10 11 12  #main.py def sum(args): temp = 0 for num in args: temp += int(num) return temp def mul(args): temp = 1 for num in args: temp *= int(num) return temp   ArgumentParser 다음과 같이 ArgumentParser 오브젝트를 생성한다.</description>
      </item>
      
    
  </channel>
</rss>