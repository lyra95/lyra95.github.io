[{"content":"Markdown here\n","description":"test post","id":0,"section":"updates","tags":null,"title":"May 2019","uri":"https://lyra95.github.io/updates/2019_may/"},{"content":"Markdown here\n","description":"test post","id":1,"section":"updates","tags":null,"title":"April 2019","uri":"https://lyra95.github.io/updates/2019_april/"},{"content":"Markdown here\n","description":"test post","id":2,"section":"updates","tags":null,"title":"March 2019","uri":"https://lyra95.github.io/updates/2019_march/"},{"content":"Markdown here\n","description":"test post","id":3,"section":"updates","tags":null,"title":"February 2019","uri":"https://lyra95.github.io/updates/2019_february/"},{"content":"Markdown here\n","description":"test post","id":4,"section":"updates","tags":null,"title":"January 2019","uri":"https://lyra95.github.io/updates/2019_january/"},{"content":"무시할 파일 리스트를 .git/info/exclude에 추가한다\n공유되는 .gitignore를 건드리지 않으면서 이그노어 가능\n","description":"","id":5,"section":"docs","tags":[],"title":".gitignore 대신 exclude로 로컬에서만 파일 무시하기","uri":"https://lyra95.github.io/docs/git/exclude/"},{"content":"package 적용할 버젼을 더 엄격하게 적용할 때 사용함\npackage-lock.json이 있다면 npm install 대신 npm ci를 하자\n","description":"","id":6,"section":"docs","tags":[],"title":"package-json.lock이 뭘까","uri":"https://lyra95.github.io/docs/nodejs/honey-tip/"},{"content":"디렉토리 이동\ncd {path}\n디렉토리 만들기\nmkdir {path}\n디렉토리 내용물보기\nls\n-a 숨김파일도 보기\n파일 내용물 보기\ncat {path}\n","description":"","id":7,"section":"docs","tags":["linux","command"],"title":"Linux command","uri":"https://lyra95.github.io/docs/git/linux_command/"},{"content":"git docs\ngit 관리모듈 생성\ngit init {path}\nvirsion history 보기\ngit log\n\u0026ndash;stat 수정된 파일과 몇 line 수정됬는지 자세히 보기\n-p\n바뀐 status 보기\ngit status\n변경사항 staging\ngit add {filename}\n새 버젼 만들기\ngit commit\n-m {msg}\n업로드\ngit push\n차이점 보기\ngit diff\n마지막 버전으로 돌아가기\ngit reset \u0026ndash;hard\n특정 버전으로 이동(commit ID는 git log로 볼 수 있음)\ngit checkout {commit ID}\ngit checkout {branch name}\n특정 버전으로 리셋(그 버전 이후 버전들 삭제됨)\ngit reset \u0026ndash;hard {commit ID}\n특정 버전으로 revert(commit ID 직전 버전으로 시점이 이동하고, commit을 새로 생성함)\ngit revert {commit ID}\n(What is the meaning of revert this commit and roll back this commit in GitHub for Windows?)[https://stackoverflow.com/questions/15039271/what-is-the-meaning-of-revert-this-commit-and-roll-back-this-commit-in-github-fo]\n텍스트 에디터 바꾸기\ngit config \u0026ndash;global core.editor \u0026ldquo;vim\u0026rdquo;\n","description":"","id":8,"section":"docs","tags":["git"],"title":"Git command list","uri":"https://lyra95.github.io/docs/git/gitcommand/"},{"content":"문제 Visual Studio 2019\nWindows 10 64bits\nC++17\n컴파일했을 때 수많은 C2760 메시지와 syntax가 전혀 틀리지 않았는데도 ;나 ) 따위에 틀렸다고 뜰 때.\n해결 Go to project property -\u0026gt; C/C++ -\u0026gt; Language -\u0026gt; Conformance mode. Set it to No(/permissive).\nreference 모던 C++과 컴파일러의 호환 문제인가 싶다. 컴파일러를 C++17로 설정했는데도 나타나는 문제다. MS는 버그가 아니라 우기는데 사람들은 화나서 비추주는 중.\nhttps://developercommunity.visualstudio.com/t/error-c2760-in-combaseapih-with-windows-sdk-81-and/185399\n","description":"","id":9,"section":"docs","tags":["bug","cpp","vs2019"],"title":"error C2760: syntax error: unexpected token 'identifier', expected 'type specifier'","uri":"https://lyra95.github.io/docs/configurations/c2760/"},{"content":"출처\n둘 다 클래스 인스턴스를 생성하지 않고 메서드를 사용하는 법(정적메서드)과 관련되어있다.\n@staticmethod 1 2 3 4 5 6 7 8 9 10 11  class Test : num = 0 @staticmethod def add (x, y) : return x + y print(Test.add(1,1)) t = Test() print(t.add(1,1)) # allowed, but not recommended   객체를 통한 정적메소드 접근은 C#에서는 에러, Java, C++에서는 warning이라고 한다.\n1 2 3 4 5 6 7 8 9 10 11  class Test : num = 0 @staticmethod def add (x, y) : return x + y + self.num print(Test.add(1,1)) # error t = Test() print(t.add(1,1)) # error   class 생성까지는 문제가 안되지만 add를 콜할 때 self가 정의되지 않다고 에러가 뜬다. (self를 파라미터로 받지 않았으니\u0026hellip;)\n굳이 이렇게 헷갈릴만한 코드를 쓰느니 class 바깥으로 빼는게 좋다고 생각하는 사람들도 있다.\n@classmethod cls를 파라미터로 꼭 넣어줘야 한다.\n1 2 3 4 5 6 7 8 9 10 11  class Test : num = 10 @classmethod def add (cls, x, y) : return x + y print(Test.add(1,1)) # work t = Test() print(t.add(1,1)) # work, but not recommended   차이점 상속(inheritance)가 있으면 차이가 발생한다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  class Date : word = \u0026#39;date : \u0026#39; def __init__(self, date): self.date = self.word + date @staticmethod def now(): return Date(\u0026#34;today\u0026#34;) def show(self): print(self.date) class KoreanDate(Date): word = \u0026#39;날짜 : \u0026#39; d = KoreanDate.now() # Date\u0026#39;s instance, not KoreanDate\u0026#39;s d.show() # date : today, unexpected   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  class Date : word = \u0026#39;date : \u0026#39; def __init__(self, date): self.date = self.word + date @staticmethod def now(cls): return cls(\u0026#34;today\u0026#34;) def show(self): print(self.date) class KoreanDate(Date): word = \u0026#39;날짜 : \u0026#39; d = KoreanDate.now() # KoreanDate\u0026#39;s instance d.show() # 날짜 : today, as expected   cls는 콜 될 때의 클래스가 된다. (KoreanDate로 콜됬으니 cls=KoreanDate)\n@staticmethod는 왜 있는지 모르겠다는 악평이 많은듯 하다.\n","description":"","id":10,"section":"docs","tags":["syntax","python"],"title":"@staticmethod 와 @classmethod의 차이","uri":"https://lyra95.github.io/docs/python/python1/"},{"content":"실행 환경 OS : windows 10 64bits\nssh : openSSH\nSetup EC2/User Guide for Linux Instances/Set up을 참고했다.\n다운받은 {key-pair-name}.pem은 어디 까먹지 않을 경로에 둔다.\n주의\nCreate a key pair 스텝을 진행하는 과정에서, 다음과 같은 설명이 있다.\n If you will use an SSH client on a macOS or Linux computer to connect to your Linux instance, use the following command to set the permissions of your private key file so that only you can read it.\nchmod 400 my-key-pair.pem\nIf you do not set these permissions, then you cannot connect to your instance using this key pair. For more information, see Error: Unprotected private key file.   macOS or Linux라길래 가볍게 무시하고 넘어갔는데, 나중에 연결할 때 바로 Error: Unprotected private key file. 에러가 발생했다. 링크를 참고해서 key pair의 permission을 변경해주자.\nLaunch an Instance EC2/userguide/get started tutorial\n그대로 참고했다.\nSecurity Group은 setup 단계대로 제대로 생성하는게 보안에 좋아보인다.\nConnect to Instance 가이드에 따르면, 다음 커맨드로 방금 만든 인스턴스에 접속할 수 있다.\n1  ssh -i /path/my-key-pair.pem my-instance-user-name@my-instance-public-dns-name    openSSH가 설치되어 있는가? key-pair path를 제대로 입력했는가? my-instance-user-name을 제대로 입력했는가? my-instance-public-dns-name을 제대로 입력했는가? key-pair 파일의 permission을 제대로 설정했는가? Error: Unprotected private key file.  public dns name은 aws ec2 console 페이지의 instance로 들어가서 확인할 수 있다.\nssh 커맨드에 -vvv를 추가하면 진행 상황에 대한 상세한 설명이 출력된다. 출력된 내용을 보고 아마존 트러블슈팅 페이지를 참고하자.\n기본 user-name을 ec2-user이다. 사용자를 추가하고싶으면 링크 참고.\n","description":"","id":11,"section":"docs","tags":["aws","ec2","server"],"title":"aws EC2 server instance 생성","uri":"https://lyra95.github.io/docs/aws/ec2-1/"},{"content":"pycahce,ps1같은 파일을 깃헙에 올리고 싶지는 않을 것이다.\n이를 제외하려면 다음과 같이 하면된다.\n 프로젝트 최상위 디렉토리에 .gitignore 파일 생성 무시하고자하는 파일, 디렉토리를 .gitignore에 작성  와일드카드를 써서 ps1파일을 싹다 제외시켰다.\n*.ps1 .vscode/ ","description":"","id":12,"section":"docs","tags":["git"],"title":".gitignore로 일부 파일 제외하기","uri":"https://lyra95.github.io/docs/git/git-ignore/"},{"content":"문제 hugo라는 프레임워크로 블로그를 관리하고 있는데, 변경된 내역을 업데이트하려면 여러 번의 커맨드를 실행해야한다.\n1 2 3 4 5 6 7 8 9  hugo -t \u0026#34;zdoc\u0026#34; cd public git add . git commit -m \u0026#39;.\u0026#39; git push cd .. git add . git commit -m \u0026#39;.\u0026#39; git push   매번 타자를 치는 것도 손이 아파서 뭔가 방법이 없나 했다.\n 귀찮음이 프로그래머를 성장시킨다\n 방법 text파일을 하나 만들고 실행하고자 할 커맨드를 다 작성한다.\n1 2 3 4 5 6 7 8 9  hugo -t \u0026#34;zdoc\u0026#34; cd public git add . git commit -m \u0026#39;.\u0026#39; git push cd .. git add . git commit -m \u0026#39;.\u0026#39; git push   다른 이름으로 저장 -\u0026gt; 모든 확장자 -\u0026gt; {이름}.ps1 으로 저장한다.\npowershell을 실행해서 ./{이름}을 입력하면 저 커맨드들이 한꺼번에 실행된다.\n나는 왜 안되지 하는 분들께 powershell이 이런식으로 ps1파일을 읽어와서 실행하는 것을 default로 막아놨다.\n그 설정을 변경하려면 powershell을 관리자로 실행한 뒤 Set-ExecutionPolicy RemoteSigned를 입력하면 된다.\n 출력되는 보안 이슈에 관한 설명을 꼭 읽고나서 설정을 바꾸세요\n 1 2 3 4 5 6 7  PS C:\\Windows\\system32\u0026gt; Set-ExecutionPolicy RemoteSigned Execution Policy Change The execution policy helps protect you from scripts that you do not trust. Changing the execution policy might expose you to the security risks described in the about_Execution_Policies help topic at https:/go.microsoft.com/fwlink/?LinkID=135170. Do you want to change the execution policy? [Y] Yes [A] Yes to All [N] No [L] No to All [S] Suspend [?] Help (default is \u0026#34;N\u0026#34;): Y   누군가 원격으로 내 컴퓨터에 접속해서 미리 작성해둔 ps1 스크립트를 실행해버릴 수도 있다는 생각이 들지만 털어봐야 아무것도 없어서 저는 쿨하게 Y를 누릅니다.\n","description":"","id":13,"section":"docs","tags":["powershell","ps1"],"title":"ps1 파일로 powershell command 한 번에 실행하기","uri":"https://lyra95.github.io/docs/powershell/powershell-ps1/"},{"content":"__name__은 모듈 이름을 나타낸다. main 모듈일 경우 모듈이름은 main이된다.\n자세히 알아보기 위해 main.py랑 hello.py가 다음과 같이 있다 치자.\n1 2 3 4  #hello.py def foo(): print(\u0026#34;hello.py : \u0026#34; + __name__) foo()   1 2 3 4  #main.py import \u0026#34;hello.py\u0026#34; print(\u0026#34;main.py : \u0026#34; + __name__)   main.py를 실행하면 다음과 같다.\n1 2 3  PS C:\\dev\\ml\u0026gt; \u0026amp; \u0026#34;C:/Program Files/Python39/python.exe\u0026#34; c:/dev/ml/main.py hello.py : hello main.py : __main__   hello.py를 실행하면 다음과 같다.\n1 2  PS C:\\dev\\ml\u0026gt; \u0026amp; \u0026#34;C:/Program Files/Python39/python.exe\u0026#34; c:/dev/ml/hello.py hello.py : __main__   C++에서는 모듈 한 곳을 정해서 main 함수를 정의해야한다. 그리고 그 main함수가 프로그램의 엔트리 포인트가 된다.\n근데 python에서는 main함수가 딱히 정의 안 되어있어도 된다. 그냥 실행한 모듈이 main모듈이 되는 것이다.\n그래서 if __name__ == '__main__':의 정체는 바로, \u0026ldquo;해당 모듈이 main일 경우에~\u0026rdquo; 라는 의미다.\n","description":"","id":14,"section":"docs","tags":["syntax","python"],"title":"if __name__ == '__main__': 이 뭘까","uri":"https://lyra95.github.io/docs/python/python2/"},{"content":"기존 유저로 새 유저 생성 가이드 참고.\nrsa key pair는 이미 생성해서 4.번부터(sudo adduser {유저이름}) 6.b(chmod 600 .ssh\\authorized_keys) 까지 따라했다.\nsudo adduser newuser sudo su - newuser mkdir .ssh key pair(for new user)의 public key를 ec2 서버에 추가하기 key pair를 안 만들었다면 openSSH든 putty든 아마존에서 create key pair를 하든 아무튼 생성한다.\n ssh-keygen -y -f /path_to_key_pair/key-pair-name.pem로 public key를 얻는다. 대충 다음과 같이 생겼을 것이다. 복사를 한다.\n1  ssh-rsa aaaaaaaasdfjlsjadfl;ajf;asdjf어쩌고저쩌고asdjflas   ec2 서버에 접속해서 새 계정의 홈 디렉토리로 가서, 윗 단계에서 생성한 .ssh/authorized_keys에 붙여넣기 한다.\n cat \u0026gt;\u0026gt; .ssh\\authorized_keys 명령어든 뭐든 쓰삼\n plus alpha 방금 만든 새로운 계정을 ipad의 termius app에서 접속 가능하게 하고 싶었다.\ntermius app에서 rsa key를 생성하고 퍼블릭 키를 gmail로 보내서 데스크탑에서 복사한다.\n데스크탑에서 ec2 서버에 접속한 후, 위에서 처럼 authorized_keys에 퍼블릭키를 추가해주면 된다.\n시큐리티 그룹 설정에 맞으면 아이패드에서도 접속할 수 있다.\n 본인은 집 라우터 ip를 시큐리티 그룹 ssh 연결로 설정해둬서 집 와이파이로 연결했을때만 들어가진다.\n ","description":"","id":15,"section":"docs","tags":["aws","ec2","server"],"title":"aws EC2 server ADD USER","uri":"https://lyra95.github.io/docs/aws/ec2-2/"},{"content":"블로그 포스팅을 할 때 hugo new {path}/{namd}.md 같은 식으로 .md파일을 생성하는데, path가 점점 길어지다 보니 타이핑이 귀찮아져서 .ps1파일을 하나 생성했다.\n기본적인 if, switch문을 활용했다.\nif MS docs\nswitch MS docs\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  // post.ps1 $folder=$args[0] $name=$args[1] $path=\u0026#34;\u0026#34; switch ($folder) { \u0026#34;go\u0026#34; { $path=\u0026#34;content/ko/docs/go/\u0026#34; } \u0026#34;graphics\u0026#34; { $path=\u0026#34;content/ko/docs/graphics/\u0026#34; } Default { \u0026#34;Nothing is happened\u0026#34; } } if ( $path -ne \u0026#34;\u0026#34; ) { hugo new $path$name.md } else { \u0026#34;Nothing is happened\u0026#34; }    variable은 기본적으로 ${name}의 형식이다. $args로 사용자가 입력한 argument를 가져올 수 있다. !=이 아니라 -ne을 쓴다.  생각해보니 굳이 switch문을 쓸 필요는 없었다.\n1 2 3 4 5  // post.ps1 $folder=$args[0] $name=$args[1] $path=\u0026#39;content/ko/docs/\u0026#39; hugo new $path$folder/$name.md   이제 터미널에 ./post {dir} {name}만 입력해도 된다. ./post go new 이런 식으로.\n","description":"","id":16,"section":"docs","tags":["powershell","ps1"],"title":"Powershell 기본 문법","uri":"https://lyra95.github.io/docs/powershell/powershell-1/"},{"content":"Error Description vscode 19\nwindows 10 64bit\nbuild 시 다음과 같은 에러메세지\n1 2 3 4 5 6 7 8 9  Starting build... cl.exe /Zi /EHsc /nologo /Fe: C:\\dev\\codejam\\strikeBall.exe C:\\dev\\codejam\\strikeBall.cpp \u0026#39;cl.exe\u0026#39; is not recognized as an internal or external command, operable program or batch file. Build finished with error(s). The terminal process failed to launch (exit code: -1). Terminal will be reused by tasks, press any key to close it.   tasks.json\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  { \u0026#34;version\u0026#34;: \u0026#34;2.0.0\u0026#34;, \u0026#34;tasks\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;cppbuild\u0026#34;, \u0026#34;label\u0026#34;: \u0026#34;C/C++: cl.exe build active file\u0026#34;, \u0026#34;command\u0026#34;: \u0026#34;cl.exe\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;/Zi\u0026#34;, \u0026#34;/EHsc\u0026#34;, \u0026#34;/nologo\u0026#34;, \u0026#34;/Fe:\u0026#34;, \u0026#34;${fileDirname}\\\\${fileBasenameNoExtension}.exe\u0026#34;, \u0026#34;${file}\u0026#34; ], \u0026#34;options\u0026#34;: { \u0026#34;cwd\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34; }, \u0026#34;problemMatcher\u0026#34;: [ \u0026#34;$msCompile\u0026#34; ], \u0026#34;group\u0026#34;: { \u0026#34;kind\u0026#34;: \u0026#34;build\u0026#34;, \u0026#34;isDefault\u0026#34;: true }, \u0026#34;detail\u0026#34;: \u0026#34;compiler: cl.exe\u0026#34; } ] }   Intellisense c++ configuration(UI)\nSolution Intellisense c++ configuration의 compiler path가 맞는지 확인하자.\ntasks.json에서 command \u0026ldquo;cl.exe\u0026quot;를 실제 cl.exe의 path로 바꾸거나, 환경변수에 cl.exe path를 추가해보자.\n그래도 해결이 안 된다면(필자와 같은 경우) 링크 참고\nDear People from the future looking to solve your issue: Here is what we have figured out so far: In case you get the error C1034: iostream: no include path set: If you haven't already, start VS code from the Developer Command Prompt that is installed with the MSVC compiler set. If you have everything resolved now, very good. If not, continue. In case you get the error fatal error LNK1112: module machine type 'x86' conflicts with target machine type 'x64', you need to start VS Code from the x64 Developer Command Prompt  Developer Command Prompt에서 project directory로 들어가서 code . command를 통해 vs code를 실행하자. 이후 build시 cl.exe is not recognized 에러가 해결됬다.\nPS:Another ERROR 1 2 3  helloworld.cpp c:\\Users\\nicta\\dev\\c++\\helloworld\\helloworld.cpp(1): fatal error C1034: iostream: no include path set The terminal process terminated with exit code: 2   build 시 위와 같이 standard library header가 include 되지 않고 C1034 에러코드가 나는 경우,\nintellisense c/c++ configuration에서 include path를 확인해보자.\n필자의 경우 standard library header file들이 C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.28.29910\\include 경로에 있었는데, configuration에 path가 추가가 안 되어 있어서 추가해줬다.\n","description":"","id":17,"section":"docs","tags":["c++","cl.exe","vscode","config"],"title":"VScode 'cl.exe' is not recognized error","uri":"https://lyra95.github.io/docs/configurations/cl-exe-setting/"},{"content":"param([switch] $help )를 이용해서 if-else로 처리한다.\n1 2 3 4 5 6 7 8 9 10 11 12  param([switch] $help ) if ($help) { Write-Host \u0026#34;create new md file:\u0026#34; write-host \u0026#34;./post {category} {name}\u0026#34; } else { $folder=$args[0] $name=$args[1] $path=\u0026#39;content/ko/docs/\u0026#39; hugo new $path$folder/$name.md }   -h 나 -help flag를 주면된다.\n1 2 3 4  PS C:\\dev\\blog\u0026gt; ./post -h create new md file: ./post {category} {name}   ","description":"","id":18,"section":"docs","tags":["powershell","help"],"title":"Help 메시지 출력하게 하기","uri":"https://lyra95.github.io/docs/powershell/help/"},{"content":"*args는 파라미터를 여러개(정해지지 않은 갯수)로 받을 때 쓴다.\n굳이 이름이 args일 필요는 없다. *Namelist 이렇게 써도 된다.\n타입을 출력해보면 args는 tuple임을 알 수 있다.\n**kwargs도 파라미터를 여러개(정해지지 않은 갯수)로 받을 때 쓴다. 차이점은 dict형태로 받는다는 것이다.\n얘도 굳이 이름이 kwargs일 필요는 없다.\n1 2 3 4 5 6 7 8 9 10 11  def fo(*names): print(type(names),names) for n in names: print(n) def foo(**names): print(type(names),names) for k,v in names.items(): print(k,v) fo(\u0026#34;a\u0026#34;,1,True) foo(a=1,b=True,c=\u0026#34;c\u0026#34;)   1 2 3 4 5 6 7 8  \u0026lt;class \u0026#39;tuple\u0026#39;\u0026gt; (\u0026#39;a\u0026#39;, 1, True) a 1 True \u0026lt;class \u0026#39;dict\u0026#39;\u0026gt; {\u0026#39;a\u0026#39;: 1, \u0026#39;b\u0026#39;: True, \u0026#39;c\u0026#39;: \u0026#39;c\u0026#39;} a 1 b True c c   ","description":"","id":19,"section":"docs","tags":["syntax","python"],"title":"*args와 **kwargs","uri":"https://lyra95.github.io/docs/python/python3/"},{"content":"먼저 vscode에서 remote - ssh 애드온을 설치한다.\n왼쪽 탭에 remote explore라고 새로운 탭이 생긴다. ssh targets에 아직 아무것도 없다.\n톱니바퀴를 눌러서 config파일을 눌러서 다음과 같이 내용을 수정했다.\n1 2 3 4 5  # Read more about SSH config files: https://linux.die.net/man/5/ssh_config Host {아무거나 display할 이름} HostName {ec2 인스턴스의 dns나 ipv4} User ec2-user IdentityFile {key pair pem 파일 경로}   error: The process tried to write to a nonexistent pipe config 파일 경로가 c:\\users\\{유저이름}\\.ssh\\config 였는데, config파일을 복사해서 C:\\ProgramData\\ssh\\config로 옮겼다. 그리고나서 remote-ssh 애드온 셋팅에서 config 경로를 C:\\ProgramData\\ssh\\config로 바꿨더니 해결되었다.\n 유저이름이 한글로 되어있어서 생긴 문제인가 싶다. 윈도우즈는 유저이름 폴더를 바꿀 수단을 제공해주지 않아서 빡친다. (예전에 이름 바꾸려고 레지스트리 잘못건드리다가 포맷함.)\n ","description":"","id":20,"section":"docs","tags":["aws","vscode","ssh","setting"],"title":"vs code remote:ssh로 ec2 접속","uri":"https://lyra95.github.io/docs/aws/ec2-3/"},{"content":"Golang는 쉽고 간편한 테스트와 벤치마크를 제공합니다. 이 항목에서는 간단하게 소수판별 프로그램을 작성하며 golang의 테스트와 벤치마크를 사용해봅시다.\nTDD(Test-Driven-Deleopment, 테스트 주도 개발) 절차에 따라 코드를 작성해 봅시다.\n모듈 생성 프로젝트 디렉토리에서 터미널을 열고, go mod init {module 이름}을 입력합니다. 모듈이름은 prime으로 하겠습니다.\n1 2  PS C:\\dev\\goproject\\prime\u0026gt; go mod init prime go: creating new go.mod: module prime   go.mod 파일이 생성되었습니다.\ntest go 파일 생성/작성 test를 위한 go 파일은 이름이 _test.go로 끝나야 합니다. 프로젝트 디렉토리에 prime_test.go라는 파일을 생성하고 다음과 같이 작성합니다.\n1 2 3 4 5 6 7 8  // prime_test.go package main import \u0026#34;testing\u0026#34; func TestPrime1(t *testing.T) { }    Test{테스트이름}(t *testing.T) 형식을 지키면 됩니다. 테스트이름의 첫 글자는 대문자여야 합니다.  이제 TestPrime1 함수 안에 테스트할 코드를 입력하면 됩니다.\n하지만 아직 구체적으로 어떤 소수 판별 프로그램을 작성할지 정하지 않았군요. 대충 3가지가 떠오릅니다.\n   자연수 n을 입력받아서 n이 소수면 true 아니면 false를 리턴하는 프로그램    자연수 n을 입력받아서 1~n까지의 소수의 개수를 리턴하는 프로그램    자연수 n을 입력받아서 1~n까지의 소수의 리스트를 리턴하는 프로그램    어떤 걸로 할지는 여러분 마음대로입니다. 저는 2를 택하겠습니다. 그러면 이런식으로 테스트 코드를 작성하면 됩니다. (1~100까지 중에 소수가 25개가 있음을 참고)\n1 2 3 4 5 6  func TestPrime1(t *testing.T) { result := prime(100) if result != 25 { t.Errorf(\u0026#34;prime(100) should be 25 but prime(100) returns %d\u0026#34;, result) } }   테스트 실행 prime이 아직 정의가 안 됬습니다. prime.go 파일을 생성하고 다음과 같이 작성합시다.\n1 2 3 4 5 6  // prime.go package main func prime(n int) int { return 0 }   터미널에서 go test를 입력하여 test를 실행할 수 있습니다.\n1 2 3 4 5 6  PS C:\\dev\\goproject\\prime\u0026gt; go test --- FAIL: TestPrime1 (0.00s) prime_test.go:8: prime(100) should be 25 but prime(100) returns 0 FAIL exit status 1 FAIL prime 4.138s   당연히 테스트는 실패합니다.\nprime.go 코드 작성 이 글의 주된 목표는 테스트 활용이기 때문에, 이 부분은 그냥 복붙하시고 다음 장으로 넘어가도 좋습니다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  // prime.go package main func isPrime(n int) bool { if n == 0 || n == 1 { return false } for d := 2; d*d \u0026lt;= n; d++ { if n%d == 0 { return false } } return true } func prime(n int) int { cnt := 0 for i := 1; i \u0026lt;= n; i++ { if isPrime(i) { cnt++ } } return cnt } func main() { }    효율성이 주된 논제가 아니므로, 가독성을 위해 에라토스테네스의 체 알고리즘은 사용하지 않았습니다.\n 테스트 실행 go test로 테스트를 해봅시다.\n1 2 3 4  PS C:\\dev\\goproject\\prime\u0026gt; go test PASS ok prime 4.891s PS C:\\dev\\goproject\\prime\u0026gt;   다음 포스트에서는 테스트 모듈에 대해 더 자세히 알아보겠습니다.\n더 읽어볼거리 자연수를 다루다 보니 uint를 쓸까(unsigned) 고민했었는데 링크를 참고해 보세요.\n","description":"","id":21,"section":"docs","tags":["golang","test","benchmark"],"title":"(1)-1 : golang test","uri":"https://lyra95.github.io/docs/go/go-test-1/"},{"content":"개요 간단한 계산기 프로그램을 예로 들어 설명한다.\nCLI에서 python main.py -op sum 1 2 3이런 식으로 프로그램에 인풋을 주고 싶다고 하자. (결과는 6을 출력하도록)\nsum, mul 함수 작성 (skip) 일단 argparse랑은 상관 없는 sum,mul함수를 작성한다.\n1 2 3 4 5 6 7 8 9 10 11 12  #main.py def sum(args): temp = 0 for num in args: temp += int(num) return temp def mul(args): temp = 1 for num in args: temp *= int(num) return temp   ArgumentParser 다음과 같이 ArgumentParser 오브젝트를 생성한다. 그리고 어떤 종류의 argument를 받을지 .add_argument()로 추가할 수 있다. 물론 .add_argument()를 여러개 해도 된다\n1 2 3 4 5  import argparse parser = argparse.ArgumentParser(description=\u0026#34;usage examples:\\npython main.py -op sum 1 2 3 4\\npython main.py -op mul 1 2 3 4\u0026#34;) parser.add_argument(\u0026#34;-op\u0026#34;, default=\u0026#34;sum\u0026#34;,type=str, choices=[\u0026#34;sum\u0026#34;, \u0026#34;mul\u0026#34;])    description은 python main.py -h를 입력했을 때 보여주게 할 설명을 적으면 된다. add_argument에 대한 API는 docs 참고  파싱은 .parse_known_args()를 통해 할 수 있다. 리턴값은 리터럴 리스트와 Namespace객체의 튜플이다.\n1 2 3  script_arg, args = parser.parse_known_args() # print(type(parser.parse_known_args()),parser.parse_known_args()) # print(args,type(args))   예를 들어 python main.py -op sum 1 2 3라고 cmd에 입력했다면, parser.parse_known_args()의 결과값은 \u0026lt;class 'tuple'\u0026gt; (Namespace(op='sum'), ['1', '2', '3'])이 된다. (궁금하면 주석 빼고 실행해보길)\n다른 argument들을 설정했다면 \u0026lt;class 'tuple'\u0026gt; (Namespace(op='sum', justName=None), ['1', '2', '3'])이런 식으로 될 것이다.\nscript_arg에 Namespace객체가 저장되어있다. 다음과 같이 꺼낼 수 있다.\n1 2 3 4 5 6  if script_arg.op == \u0026#34;sum\u0026#34;: print(sum(args)) elif script_arg.op == \u0026#34;mul\u0026#34;: print(mul(args)) else: raise ValueError(f\u0026#34;undefined input {script_arg.op}\u0026#34;)    만약 add_argument(\u0026quot;-justName\u0026quot;, ...)이 또 있었다면 .justName이라고 하면된다.  동작 예시 어떤 식으로 동작하는지 다음을 참고하자.\n1 2 3 4 5 6 7 8 9 10 11 12 13  PS C:\\dev\\ml\u0026gt; python main.py -h usage: main.py [-h] [-op {sum,mul}] usage examples: python main.py -op sum 1 2 3 4 python main.py -op mul 1 2 3 4 optional arguments: -h, --help show this help message and exit -op {sum,mul} PS C:\\dev\\ml\u0026gt; python main.py -op mul 1 2 3 4 5 120 PS C:\\dev\\ml\u0026gt; python main.py -op abc 12 3 usage: main.py [-h] [-op {sum,mul}] main.py: error: argument -op: invalid choice: \u0026#39;abc\u0026#39; (choose from \u0026#39;sum\u0026#39;, \u0026#39;mul\u0026#39;)   레퍼런스 python docs\n","description":"","id":22,"section":"docs","tags":["python"],"title":"CLI argument parsing : argparse","uri":"https://lyra95.github.io/docs/python/argparse/"},{"content":"Hugo에 수식을 쓰고 싶으면 mathjax 플러그인을 쓰면된다.\nmathjax_support.html 생성 먼저 mathjax를 로딩해주는 html 파일을 작성한다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  \u0026lt;!--mathjax_support.html--\u0026gt; \u0026lt;script\u0026gt; MathJax = { tex: { inlineMath: [[\u0026#39;$\u0026#39;, \u0026#39;$\u0026#39;], [\u0026#39;\\\\(\u0026#39;, \u0026#39;\\\\)\u0026#39;]], displayMath: [[\u0026#39;$$\u0026#39;,\u0026#39;$$\u0026#39;], [\u0026#39;\\\\[\u0026#39;, \u0026#39;\\\\]\u0026#39;]], processEscapes: true, processEnvironments: true }, options: { skipHtmlTags: [\u0026#39;script\u0026#39;, \u0026#39;noscript\u0026#39;, \u0026#39;style\u0026#39;, \u0026#39;textarea\u0026#39;, \u0026#39;pre\u0026#39;] } }; window.addEventListener(\u0026#39;load\u0026#39;, (event) =\u0026gt; { document.querySelectorAll(\u0026#34;mjx-container\u0026#34;).forEach(function(x){ x.parentElement.classList += \u0026#39;has-jax\u0026#39;}) }); \u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://polyfill.io/v3/polyfill.min.js?features=es6\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34; id=\u0026#34;MathJax-script\u0026#34; async src=\u0026#34;https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;   특정 테마를 사용중이라면 {프로젝트최상위}/themes/{theme이름}/layouts/partials 폴더에 저런 html파일들이 들어가 있는데, 위에서 만든 mathjax_support.html을 이 밑의 아무곳에나 둔다.(경로를 기억할 것)\n필자는 math라는 디렉토리를 layouts/partials밑에 생성해서, {생략}/layouts/partials/math/mathjax_support.html 라는 경로가 되었다. (파일이름을 포함한 경로만 기억하면 본인 마음대로 해도 된다. mathjax_load.html로 하든 말든)\nfooter.html에 line추가하기 여기서 살짝 편법을 쓴다.\n보통 모든 게시글에는 꼬릿말이 있기에, footer.html을 로딩하게 된다. 그래서 footer.html 로딩되는김에 겸사겸사 mathjax_support.html도 로딩하라고 코드를 한 줄 추가해준다.\nfooter.html은 layouts/partials 밑의 어딘가에 있을 것이다. 못 찾겠으면 반드시 로딩될 것 같은 다른 html에 해도 된다.\n만일 필자처럼 mathjax_support.html경로를 설정했다면, 다음과 같은 코드를 추가하면 된다.\n1 2 3 4 5 6  \u0026lt;!--footer.html--\u0026gt; \u0026lt;!--어쩌고저쩌고 코드들--\u0026gt; \u0026lt;!--마지막 줄에 아래 코드를 추가--\u0026gt; {{ if $.Param \u0026#34;mathjax\u0026#34; }}{{ partial \u0026#34;math/mathjax_support.html\u0026#34; . }}{{ end }}   사용법 글을 쓸 마크다운 파일에서 프론트매터에 mathjax : true라고 타입하면 된다. 문법은 latex이랑 거의 같고, inline은 $, display는 $$로 하면된다.\n","description":"","id":23,"section":"docs","tags":["math","blog","setting"],"title":"Hugo Mathjax Setting","uri":"https://lyra95.github.io/docs/blogging/mathjax/"},{"content":"테스트 여러개 생성 그냥 Test 함수를 여러개 작성하면 됩니다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  // prime_test.go func TestPrimeZero(t *testing.T) { result := prime(0) if result != 0 { t.Errorf(\u0026#34;prime(0) should be 0 but prime(0) returns %d\u0026#34;, result) } } func TestPrimeNegative(t *testing.T) { result := prime(-100) if result != 0 { t.Errorf(\u0026#34;prime(-100) should be 0 but prime(-100) returns %d\u0026#34;, result) } } func TestPrime100(t *testing.T) { result := prime(100) if result != 25 { t.Errorf(\u0026#34;prime(100) should be 25 but prime(100) returns %d\u0026#34;, result) } } func TestPrime1000(t *testing.T) { result := prime(1000) if result != 168 { t.Errorf(\u0026#34;prime(1000) should be 168 but prime(100) returns %d\u0026#34;, result) } }   test 일부만 실행 go test -run {테스트이름}으로 일부 테스트만 실행할 수 있습니다.\n1 2 3 4  PS C:\\dev\\goproject\\prime\u0026gt; go test -run Prime1000 PASS ok prime 4.289s PS C:\\dev\\goproject\\prime\u0026gt;    이름에서 Test부분은 빠집니다!\n go test -run Prime을 입력하면 이름이 Prime으로 시작하는 모든 테스트를 실행합니다.\nt.Error(), t.Fail() t.Error()는 테스트가 실패하면 모든 테스트를 중단합니다. 반면에 t.Fail()은 테스트가 실패해도 다른 테스트들을 계속 진행합니다.\n T.Errorf()에서 f는 format string의 f입니다.\n t.Fail()을 이용할 시에는 실패 메시지 출력을 위해 t.Log() 나 t.Logf()를 활용하세요. t.Fail() 플래그가 셋되면(=테스트가 실패하면) 메시지가 출력됩니다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  // prime_test.go func TestFail(t *testing.T) { t.Fail() t.Log(\u0026#34;this test must fail\u0026#34;) } func TestPrime100(t *testing.T) { result := prime(100) if result != 25 { t.Fail() t.Logf(\u0026#34;prime(100) should be 25 but prime(100) returns %d\u0026#34;, result) } } func TestPrime1000(t *testing.T) { result := prime(1000) if result != 168 { t.Fail() t.Logf(\u0026#34;prime(1000) should be 168 but prime(1000) returns %d\u0026#34;, result) } } func TestPrimeZero(t *testing.T) { result := prime(0) if result != 0 { t.Fail() t.Logf(\u0026#34;prime(0) should be 0 but prime(100) returns %d\u0026#34;, result) } } func TestPrimeNegative(t *testing.T) { result := prime(-100) if result != 0 { t.Fail() t.Logf(\u0026#34;prime(-100) should be 0 but prime(100) returns %d\u0026#34;, result) } }   테스트를 해봅시다.\n1 2 3 4 5 6 7  PS C:\\dev\\goproject\\prime\u0026gt; go test --- FAIL: TestFail (0.00s) prime_test.go:7: this test must fail FAIL exit status 1 FAIL prime 3.925s PS C:\\dev\\goproject\\prime\u0026gt;   쉘 출력문만 봐서는 나머지 테스트들이 진행되었는지 알 수 없네요.\ngo test -v를 실행시켜 봅시다 (verbose의 v입니다.)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  PS C:\\dev\\goproject\\prime\u0026gt; go test -v === RUN TestFail prime_test.go:7: this test must fail --- FAIL: TestFail (0.00s) === RUN TestPrime100 --- PASS: TestPrime100 (0.00s) === RUN TestPrime1000 --- PASS: TestPrime1000 (0.00s) === RUN TestPrimeZero --- PASS: TestPrimeZero (0.00s) === RUN TestPrimeNegative --- PASS: TestPrimeNegative (0.00s) FAIL exit status 1 FAIL prime 3.317s   각 테스트 결과를 다 보여주네요.\nstretchr/testify 패키지 이 패키지에서는 테스트에 유용한 함수들을 제공합니다.\n터미널에 go get github/stretchr/testify를 입력하여 패키지를 다운받습니다.\nassert.Equal(참값, 결과값, 실패시 메시지) 함수로 더 간결하게 코드를 작성할 수 있습니다.\n1 2 3 4 5 6 7 8 9 10 11  package main import ( \u0026#34;testing\u0026#34; \u0026#34;github.com/stretchr/testify/assert\u0026#34; ) func TestPrime100(t *testing.T) { assert := assert.New(t) assert.Equal(25, prime(100), \u0026#34;prime(100) should be 25\u0026#34; ) }   실패시 어떻게 메시지가 출력되나 보기 위해 TestPrime100을 조금 바꿔봅니다.\n1 2 3 4  func TestPrime100(t *testing.T) { assert := assert.New(t) assert.Equal(0, prime(100), \u0026#34;prime(100) should be 0\u0026#34; ) }   테스트 실행 시 다음과 같이 상세하게 알려줍니다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  PS C:\\dev\\goproject\\prime\u0026gt; go test -v === RUN TestPrime100 prime_test.go:11: Error Trace: prime_test.go:11 Error: Not equal: expected: 0 actual : 25 Test: TestPrime100 Messages: prime(100) should be 0 --- FAIL: TestPrime100 (0.00s) === RUN TestPrime1000 --- PASS: TestPrime1000 (0.00s) === RUN TestPrimeZero --- PASS: TestPrimeZero (0.00s) === RUN TestPrimeNegative --- PASS: TestPrimeNegative (0.00s) FAIL exit status 1 FAIL prime 3.948s   Equal() 이외에도 NotEqualf(), NotNilf() 등 많은 함수가 해당 패키지에서 제공됩니다.\n다음 주제들 벤치마크를 하는 법, 고루틴을 이용한 prime함수 개선, 분산 처리 하는 법(뮤텍스, 채널, 작업영역 분산 등등)을 다루겠습니다.\n","description":"","id":24,"section":"docs","tags":["golang","test","benchmark"],"title":"(1)-2 : golang test","uri":"https://lyra95.github.io/docs/go/go-test-2/"},{"content":"Golang은 벤치마크 기능을 지원합니다. 테스트와 마찬가지로\n   _test.go로 끝나는 파일에    testing 패키지를 임포트하고    func BenchmarkXxxx(b *testing.B) 형태로 함수를 작성하면 됩니다.    한 번 작성해 봅시다. (소스코드는 이전 포스트의 n이하의 소수의 개수를 리턴하는 함수 prime(n)를 참고하세요.)\n1 2 3 4 5 6 7 8 9 10  // prime_test.go package main import \u0026#34;testing\u0026#34; func BenchmarkPrime(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { prime(1000) } }   유의미한 시간 차이를 보일때까지 b.N은 알아서 조정됩니다.\n터미널에 go test -bench .를 입력하여 벤치마크 결과를 볼 수 있습니다.\n1 2 3 4 5 6 7 8 9  PS C:\\dev\\goproject\\prime\u0026gt; go test -bench . goos: windows goarch: amd64 pkg: prime cpu: Intel(R) Core(TM) i5-10400F CPU @ 2.90GHz BenchmarkPrime-12 29833 40675 ns/op PASS ok prime 8.221s PS C:\\dev\\goproject\\prime\u0026gt;   먼저 os와 아키텍처, cpu에 대한 정보가 나옵니다.\nBenchmarkPrime-12 29833 40675 ns/op의 의미는 BenchmarkPrime() 함수가 29833번 반복되었으며, 한 번 시행마다 40675ns 만큼 걸렸다는 뜻입니다.\n BenchmarkPrime-12에서 12의 의미는 cpu가 가질 수 있는 최대 쓰레드 수 입니다. 즉, 이 컴퓨터에서는 한 순간에 최대 12개의 고루틴들이 병렬로 실행될 수 있습니다.\n 고루틴을 이용한 멀티쓰레딩 프로그래밍으로 prime() 함수를 조금 개선해 봅시다.\n","description":"","id":25,"section":"docs","tags":["golang","test","benchmark"],"title":"(2) : golang benchmark","uri":"https://lyra95.github.io/docs/go/go-benchmark/"},{"content":"시작하기 전에 스레드, 프로세스, 컨텍스트 스위칭에대한 개념을 알고 있으면 도움이 됩니다. 몰라도 당장에는 대략적으로 이해할 수는 있겠지만 이번 기회에 알아두는 것도 좋습니다.\ngo Routine func foo()라는 함수가 있다고 합시다.\ngo foo()로 고루틴(스레드)를 생성함과 동시에 생성된 고루틴에서 foo() 함수가 수행됩니다.\n1 2 3 4 5 6 7 8 9 10  func foo() { fmt.Print(\u0026#34;Hi from new Go routine\u0026#34;) } func main() { go foo() go foo() go foo() fmt.Println(\u0026#34;Hi from Go routine main\u0026#34;) }    main 함수도 고루틴의 일종입니다.\n 이 프로그램을 실행하면 어떻게 될까요?\n1 2 3 4 5 6 7  PS C:\\dev\\goproject\\prime\\test\u0026gt; ./test.exe Hi from Go routine main PS C:\\dev\\goproject\\prime\\test\u0026gt; ./test.exe Hi from new Go routine Hi from new Go routine Hi from new Go routine Hi from Go routine main   답은 \u0026ldquo;모른다\u0026rdquo; 입니다. 4개의 고루틴( foo 3개, main 1개) 중 어느 것이 먼저 실행되고 끝날지는 OS 프로그램의 마음대로입니다.\n3개의 foo 고루틴이 끝나기전에 main 고루틴이 끝나버리면, 실행이 끝나지 않은 foo 고루틴들도 강제로 끝나버립니다.\nWaitGroup 어떻게해야 main 고루틴에서 foo 서브 고루틴들이 정상적으로 끝날 때까지 기다리게 할 수 있을까요?\n한가지 답은 WaitGroup 오브젝트입니다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package main import ( \u0026#34;fmt\u0026#34; \u0026#34;sync\u0026#34; // 1. WaitGroup이 포함된 패키지 임포트 ) func foo(wg *sync.WaitGroup) { // 2. WaitGroup Obj를 pass by ref로 받습니다. \tfmt.Println(\u0026#34;Hi from new Go routine\u0026#34;) wg.Done() // 3. foo가 완료되었다고 알립니다. } func main() { var wg sync.WaitGroup // 4. WaitGroup Obj를 생성합니다. \twg.Add(3) // 5. 3개의 foo 고루틴을 기다려야 한다고 알립니다.  go foo(\u0026amp;wg) // 6. WaitGroup Obj의 reference를 pass합니다. \tgo foo(\u0026amp;wg) go foo(\u0026amp;wg) fmt.Println(\u0026#34;Hi from Go routine main\u0026#34;) wg.Wait() // 7. foo 고루틴이 다 끝날때까지 기다립니다 \u0026lt;=\u0026gt; wg.Done()이 3번 call되기를 기다립니다. }    \u0026amp;,*가 뭔지 모르겠다면 포인터, pass by value/reference 개념을 공부해보세요\n 프로그램을 실행해 봅시다.\n1 2 3 4 5 6 7 8 9 10  PS C:\\dev\\goproject\\prime\\test\u0026gt; ./test.exe Hi from new Go routine Hi from Go routine main Hi from new Go routine Hi from new Go routine PS C:\\dev\\goproject\\prime\\test\u0026gt; ./test.exe Hi from Go routine main Hi from new Go routine Hi from new Go routine Hi from new Go routine   foo()가 3번 실행되고는 있지만 Hi from Go routine main가 몇 번째로 출력될지는 알 수 없습니다. Hi from Go routine main가 마지막에 출력되게 하려면 어떻게 해야할까요?\n간단합니다. wg.Wait()과 fmt.Print()의 순서를 바꿔주면 됩니다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( \u0026#34;fmt\u0026#34; \u0026#34;sync\u0026#34; ) func foo(wg *sync.WaitGroup) { fmt.Println(\u0026#34;Hi from new Go routine\u0026#34;) wg.Done() } func main() { var wg sync.WaitGroup wg.Add(3) go foo(\u0026amp;wg) go foo(\u0026amp;wg) go foo(\u0026amp;wg) wg.Wait() fmt.Println(\u0026#34;Hi from Go routine main\u0026#34;) }   이제 프로그램을 실행해보면 Hi from Go routine main이 마지막에 출력됩니다.\n1 2 3 4 5 6 7 8 9 10  PS C:\\dev\\goproject\\prime\\test\u0026gt; ./test.exe Hi from new Go routine Hi from new Go routine Hi from new Go routine Hi from Go routine main PS C:\\dev\\goproject\\prime\\test\u0026gt; ./test.exe Hi from new Go routine Hi from new Go routine Hi from new Go routine Hi from Go routine main   ","description":"","id":26,"section":"docs","tags":["golang","goroutine"],"title":"(3)-1 : golang goRoutine","uri":"https://lyra95.github.io/docs/go/go-goroutine/"},{"content":"이제 goRoutine을 활용해봅니다. 다음 두 함수를 prime.go에 추가합니다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  // prime.go func prime_(start, end int, handle *int, wg *sync.WaitGroup) { cnt := 0 for i := start; i \u0026lt;= end; i++ { if isPrime(i) { cnt++ } } defer wg.Done() *handle = cnt } func prime_multi(n int) int { mid := n / 2 var wg sync.WaitGroup wg.Add(2) handle1 := 0 go prime_(1, mid, \u0026amp;handle1, \u0026amp;wg) handle2 := 0 go prime_(mid+1, n, \u0026amp;handle2, \u0026amp;wg) wg.Wait() return handle1 + handle2 }   prime_()은 [start, end] 사이의 소수의 개수를 구하여, 개수를 handle 포인터에 저장합니다. 그리고 wg.Done()으로 작업이 끝났음을 알립니다.\nprime_multi()는 [1,n]을 [1,mid],[mid+1,n]으로 작업을 둘로 나누어 동시에 진행하여 소수의 개수를 구합니다.\n벤치마크 비교하기 prime_test.go에 다음을 추가합니다.\n1 2 3 4 5 6 7 8 9 10 11 12  // prime_test.go func BenchmarkPrime(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { prime(1000) } } func BenchmarkPrimeM(b *testing.B) { for i := 0; i \u0026lt; b.N; i++ { prime_multi(1000) } }   go test -bench .를 실행하면 go가 알아서 b.N을 키워가며 성능 비교를 해줍니다.\n1 2 3 4 5 6 7 8 9  PS C:\\dev\\goproject\\prime\u0026gt; go test -bench . goos: windows goarch: amd64 pkg: prime cpu: Intel(R) Core(TM) i5-10400F CPU @ 2.90GHz BenchmarkPrime-12 24724 41346 ns/op BenchmarkPrimeM-12 41620 28654 ns/op PASS ok prime 3.089s   같은 시간동안 BenchmarkPrimeM()이 BenchmarkPrime() 보다 두배가까이 더 많이 실행됬습니다.(41620 \u0026gt; 24724) 또한, 한 번 실행 당 걸린 시간도 더 짧습니다.(28654 ns \u0026lt; 41346 ns)\n","description":"","id":27,"section":"docs","tags":["golang","goroutine"],"title":"(3)-2 : goRoutine으로 prime 개선 (draft)","uri":"https://lyra95.github.io/docs/go/go-goroutine2/"},{"content":"(https://github.com/lyra95/chat-server-client-with-golang/tree/master)[https://github.com/lyra95/chat-server-client-with-golang/tree/master]\n(진행중)\n","description":"","id":28,"section":"docs","tags":["golang","server","net","cuncurrency"],"title":"Chat Server Client With Golang (draft)","uri":"https://lyra95.github.io/docs/go/chat-server-client-with-golang/"},{"content":"Is it safe to remove selected keys from map within a range loop?\ndelete(map,key)가 실제로 delete를 행하는게 아니라 그냥 flag를 setting할 뿐이라고 한다. 그래서 다음과 같은 코드를 작성해도 괜찮다.\n1 2 3 4  for key, value := range table { fmt.Printf(\u0026#34;deleting %v=\u0026gt;%v\\n\u0026#34;, key, value.value) delete(table, key) }   ","description":"","id":29,"section":"docs","tags":["golang"],"title":"Deleting Key in Map While Ranging Is Safe","uri":"https://lyra95.github.io/docs/go/deleting-key-while-ranging-is-safe/"},{"content":"https://pkg.go.dev/path/filepath#Walk\n1 2 3 4 5 6 7  // func Walk(root string, fn WalkFunc) error err := filepath.Walk(root, // type WalkFunc func(path string, info fs.FileInfo, err error) error  func(path string, info fs.FileInfo, err error) error { // do what you want to do with each file/directory, including root  } )   ","description":"","id":30,"section":"docs","tags":["filepath"],"title":"filepath.Walk로 디렉토리 순회하기","uri":"https://lyra95.github.io/docs/go/walk/"},{"content":"https://golang.org/pkg/strings/\n스트링 관련 많은 함수들을 제공한다. 몇가지 예를 들면\nfunc Contains(s, substr string) bool\nfunc HasSuffix(s, suffix string) bool\nfunc Index(s, substr string) int (첫번째 index)\nfunc Split(s, sep string) []string\nfunc Replace(s, old, new string, n int) string (n개의 old를 new로 치환한 카피 리턴)\nfunc ToUpper(s string) string\nfunc TrimRight(s string, cutset string) (string)\n1 2  fmt.Print(strings.TrimRight(\u0026#34;¡¡¡Hello, Gophers!!!\u0026#34;, \u0026#34;!¡\u0026#34;)) // ¡¡¡Hello, Gophers   ","description":"","id":31,"section":"docs","tags":["package"],"title":"strings 패키지","uri":"https://lyra95.github.io/docs/go/strings/"},{"content":"1 2 3 4 5  // 이미 있는지 확인 if _, err := os.Stat(path); os.IsNotExist(err) { // 없으므로 생성 \te := os.Mkdir(path, os.ModeDir) }   ","description":"","id":32,"section":"docs","tags":["os"],"title":"디렉토리 유무확인/생성하기","uri":"https://lyra95.github.io/docs/go/mkdir/"},{"content":"fmt.SprintF(s string, a ...interface{}) string로 가능\n1 2  var tmp string tmp = fmt.Sprintf(\u0026#34;// Date : %v %v %v\\n\u0026#34;, year, month, day)   ","description":"","id":33,"section":"docs","tags":["golang","string"],"title":"Print하지 않고 Format String 쓰기","uri":"https://lyra95.github.io/docs/go/format-string/"},{"content":"방법이 너무 다양해서 하나 통일해서 정할 필요가 있어보인다.\nREAD  os.ReadFile(path string) ([]byte, error) os.Open(path string) (*os.File , error)로 file handle을 정의해서file.Read(buffer []byte) (int n, error)를 사용하는 방법 file handle로 bufio.NewReader(file io.Reader) *bufio.Scanner를 정의해서 .Read/.ReadByte/.ReadBytes/.ReadLine/.ReadRune/.ReadString/.ReadSlice를 사용하는 방법 file handle로 bufio.NewReader(file io.Reader) *bufio.Scanner를 정의해서 .Scan(),.Split() 과 .Text()를 사용하는 방법   https://pkg.go.dev/bufio#Scanner example 참고\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  // 1 // 파일을 열어서 내용물 전체를 []byte로 받는다. result,_ := os.ReadFile(path) // 2 file,_ := os.Open(path) defer file.Close() var buffer [100]byte // 주어진 버퍼 크기만큼 데이터를 담는다. result,_ := file.Read(buffer) // 3 file,_ := os.Open(path) defer file.Close() scanner := bufio.NewReader(file) // \u0026#39;\\n\u0026#39;이 나올때까지 읽어서 string으로 받는다. result, _ := scanner.ReadString(byte(\u0026#39;\\n\u0026#39;)) // 4 file,_ := os.Open(path) defer file.Close() scanner := bufio.NewReader(file) // Split 기준을 단어 단위로 한다. 디폴트는 newline이다. scanner.Split(bufio.ScanWords) // 다음 토큰까지 scanner를 진행한다. if scanner.Scan() { // 읽은 토큰을 string으로 받는다. \tresult, _ = scanner.Text() // 예시: 123 4567 jojo -\u0026gt; 123, 4567, jojo 이렇게 단어 단위로 읽음 }   WRITE 파일을 생성하고 write 1 2 3 4 5  file, _ := os.Create(path) defer file.Close() w := bufio.NewWriter(file) w.WriteString(text) w.Flush()   기존 파일을 trunc 후 write 1 2 3 4 5 6  // OpenFile(name string, flag int, perm FileMode) (*File, error) file, _ := os.OpenFile(path, os.O_WRONLY|os.O_TRUNC, 0644) defer file.Close() w := bufio.NewWriter(file) w.WriteString(text) w.Flush()    os.O_WRONLY은 write-only, os.O_TRUNC은 trunucation을 의미한다. FileMode는 좀 더 알아봐야 할 듯  Read든 Write든 bufio를 쓰는 방향으로 통일하는게 좋겠다.\n","description":"","id":34,"section":"docs","tags":["golang","file","read","write"],"title":"file read write 하는 법","uri":"https://lyra95.github.io/docs/go/file_read_write.md/"},{"content":"strconv 패키지에 string, int를 변환하는 함수들이 있다.\nstrconv.Atoi(s string) (int,erorr)로 string-\u0026gt;int\nstrconv.ItoA(n int) string로 int-\u0026gt;string\n","description":"","id":35,"section":"docs","tags":["golang","package"],"title":"String \u003c-\u003e Int 변환하기","uri":"https://lyra95.github.io/docs/go/strconv/"},{"content":"Scan을 할 때, 인풋 버퍼를 비우지 않으면 엉뚱한 값을 입력 받을 수 있으니 인풋 버퍼를 비우는게 좋다.\n비우는 방법:\n1 2 3 4 5 6  import ( \u0026#34;os\u0026#34; \u0026#34;bufio\u0026#34; ) stdin := bufio.NewReader(os.Stdin) stdin.ReadString(\u0026#39;\\n\u0026#39;) // \u0026#39;\\n\u0026#39;이 나올때까지 버퍼를 읽는다.   ","description":"","id":36,"section":"docs","tags":["golang"],"title":"Input Buffer Flush하기","uri":"https://lyra95.github.io/docs/go/flush/"},{"content":"지금까지 읽은 책, 수강한 코스, 시청한 유튜브 채널을 리뷰하고 추천하는 글입니다.\nComputer Science General   Crash Course: Computer Science (10/10)\n전산학과/컴공 입문생에게 \u0026ldquo;대충 너가 4년간 배울 내용이 이거야\u0026quot;하고 보여주고 싶다. 종이에 구멍 뚫던 시절 이야기, 트랜지스터로 논리 게이트 짜기, cpu/register bus, OS, Network 등등 없는 얘기가 없다. 이거 본다고 갑자기 Node.js 다룰 줄 알게되거나 하는 건 아니지만, 자신이 컴공상식이 부족하다고 생각되면 보길.\nOS편 어느 컴공 대학생의 코멘트: \u0026ldquo;Two semesters in 12 minutes. That\u0026rsquo;s efficiency.\u0026rdquo;\n  Language   Tucker의 Go 언어 프로그래밍 (10/10)\nGo를 배우는 목적이 아니더라도 전산학과/컴퓨터공학과 입문생에게 추천하고 싶은 책.\n  모던 C++ 디자인 패턴 (0/10)\n책 구성이 별로여서 잘 읽히지 않음. 번역체 심함.\n여기에서 원문으로 공부하는게 더 나을 듯.\n  Effective Modern C++, Scott Meyers (8/10)\nc++을 근사하게(그리고 모-던하게) 쓰고 싶으면 꼭 읽어야할 책. 다만 C++은 슬슬 놓아줘야할 언어인게 아닐까?\n  Programming Principles and Practice Using C++, Bjarne Stroustrup (8/10)\nC++ 크리에이터가 쓴 C++책. 프로그래밍 입문생에게 추천하고 싶다. 단순 이론말고도 저자 본인의 경험에서 우러나오는 충고들이 보석 같다. 책이 너무 두껍다. C++이라서 2점 깎음\n  Rust Doc (8/10)\nRust를 쉽게 배우는 법: C++을 배우고 고구마 100개 먹은 기분으로 rust doc을 본다. 한글번역\n  Network, Server   게임 서버 프로그래밍 교과서 (8/10)\n옛날에는 이렇게 일일이 손으로 다 했데요~ 하는 전래동화 읽는 마음으로 보는 책\n  유니티 네트워크 프로그래밍 (반다이 남코 현역 프로그래머가 알려주는) (6/10)\n유니티 2020.3.2f1 기준 작동하지 않는 코드들이 많다. 책의 예제에서 활용한 그래픽 리소스 같은 것도 없고 클라이언트 부분 예제 코드도 없다. 사실상 따라하기 불가능.\n  Graphics   3D 게임을 움직이는 수학과 물리 (5/10)\nwindows 10 64bit 기준 작동하지 않는 코드들 이 있다.(\u0026lt;d3dx9.h\u0026gt; 따위가 windows sdk에 포함되지 않아서 알아서 받아야 함)\nDirectX3D 엔진을 가볍게 배우고자 산 책인데, 그런 설명은 없고 구 같은 도형을 어케 그릴지만 나와있다.(코드 500줄 중에 구를 그리는 파트는 30줄 정도고 나머지는 설명이 없는 directx 구동하는 부분.)\n  Foundations of 3D Computer Graphics, Steven J. Gortler (읽는 중) (8/10)\nOpenGL과 hello하기 위해 매우 고통스러운 것을 빼면 좋은 책. 이론 설명이 깔끔하고 연습 문제도 좋고 예제도 좋고(openGL 셋팅에 성공했다면)\n  The Cherno의 openGL course (유튜브) (10/10)\n3년 전부터 업뎃도 안하고 애플도 지원을 끊겟다고 선언한 레거시 천지의 openGL을 머리를 쥐어뜯으며 셋팅하고 있을 때 발견했다.(드디어 뭔가 작동하는 걸 설명하는 사람을 발견했어 ㅠㅠ) visual studio 사용법도 겸사겸사 익힐 수 있고, 현업자 기준 좋은 팁들을 준다.\n  Game Engine   그림으로 이해하고 만들면서 익히는 유니티 교과서 개정 4판 (9/10)\n유니티를 처음 배우는 중고등학생에게 좋은 책인듯.\n  Algorithm \u0026amp; Data Structures   Data structures and algorithm analysis in c++, 4th edition, Mark Allen Weiss (10/10)\nC++ ds책은 일단 절반이 modern이 아니거나, 대충이거나 하는데 이 책은 완벽하다.(두꺼운게 흠이지만\u0026hellip;) 설명이 매우 디테일하다(아저씨 이미 내 뇌는 새 정보를 거부하고 있어ㅜㅜ) 코드도 귀찮을 텐데 완벽히 다 작성해놨다.\n  Deeplearning   Deep Learning with PyTorch (10/10)\npytorch 공식 가이드북. 하도 AI거리니까 나도 알아는 봐야겠는데 쓸데없는 정보의 홍수 속에서 발견한 보물. 셋팅, 이론, 예제 삼박자가 완벽\n  기타 url 딥러닝을 이용한 자연어 처리 입문\npytorch로 시작하는 딥러닝 입문\npytorch docs\npytorch lightning bolt docs\npytorch lightning docs\n점프 투 파이썬\n","description":"","id":37,"section":"docs","tags":["review","book","youtube","course"],"title":"Reviews","uri":"https://lyra95.github.io/docs/book-review/"},{"content":"Error Description mingw-w64-install.exe를 실행했을때, 설치가 완료되지 못 함. 다음과 같은 에러메세지 출력됨.\n the file has been downloaded incorrectly\n To Reproduce the error windows 10 pro 64bit\nmingw-w64-install.exe 실행\n설치경로 C:\\\n   Option Selected     version 8.1.0   Architecture x86_64   Thread posix   Exception seh   Build revision 0    Solution x86_64-win32-seh zip 파일 다운로드\n설치하려던 경로에 압축풀기 후, 환경변수 PATH에 설치경로/mingw64/bin 등록\nPS  왜 win32버전으로 까는가? 필자는 간단하게 코테 문제들 풀려고 gcc 컴파일러를 쓰기 위해 mingw까는 중이다. 별 상관없이 잘 돌아간다. 그리고 posix zip파일을 받아보면 안에 bin도 없고 어케쓰는건지 모르겠음  ","description":"","id":38,"section":"docs","tags":["mingw","windows","config"],"title":"MINGW64 설치오류 the file has been downloaded incorrectly","uri":"https://lyra95.github.io/docs/configurations/mingw-install/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\nThis article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\n Headings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae.\nNote that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item  First Sub-item Second Sub-item    Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","description":"","id":39,"section":"blog","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"https://lyra95.github.io/blog/markdown-syntax/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\nHugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\n YouTube Privacy Enhanced Shortcode   Twitter Simple Shortcode .twitter-tweet { font: 14px/1.45 -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif; border-left: 4px solid #2b7bb9; padding-left: 1.5em; color: #555; } .twitter-tweet a { color: #2b7bb9; text-decoration: none; } blockquote.twitter-tweet a:hover, blockquote.twitter-tweet a:focus { text-decoration: underline; }  “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Graphic Design History (@DesignReviewed) January 17, 2019 Vimeo Simple Shortcode  .__h_video { position: relative; padding-bottom: 56.23%; height: 0; overflow: hidden; width: 100%; background: #000; } .__h_video img { width: 100%; height: auto; color: #000; } .__h_video .play { height: 72px; width: 72px; left: 50%; top: 50%; margin-left: -36px; margin-top: -36px; position: absolute; cursor: pointer; }  ","description":"","id":40,"section":"blog","tags":["shortcodes","privacy"],"title":"Rich Content","uri":"https://lyra95.github.io/blog/rich-content/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\ninhospita parcite confusaque translucet patri vestro qui optatis\nlumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\n Exierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude  Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus\nsilentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria\ntractus malis.\n Comas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et  Vagus elidunt \nThe Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra\ndicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere\nfurit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli\nLelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare\nEchionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert\nausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae\nvulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem\nPropoetides parte.\n","description":"","id":41,"section":"blog","tags":["markdown","text"],"title":"Placeholder Text","uri":"https://lyra95.github.io/blog/placeholder-text/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\nEmoji can be enabled in a Hugo project in a number of ways.\n The emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site’s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 🙈 🙉 🙉 🙊 🙊\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3  .emoji { font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols; }  ","description":"","id":42,"section":"blog","tags":["emoji"],"title":"Emoji Support","uri":"https://lyra95.github.io/blog/emoji-support/"}]