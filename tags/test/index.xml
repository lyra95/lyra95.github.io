<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>test on ZDoc</title>
    <link>https://lyra95.github.io/tags/test/</link>
    <description>Recent content in test on ZDoc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Sun, 25 Apr 2021 18:18:20 +0900</lastBuildDate>
    
        <atom:link href="https://lyra95.github.io/tags/test/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>(1)-1 : golang test</title>
        <link>https://lyra95.github.io/docs/go/go-test-1/</link>
        <pubDate>Sun, 25 Apr 2021 18:18:20 +0900</pubDate>
        
        <guid>https://lyra95.github.io/docs/go/go-test-1/</guid>
        <description>Golang는 쉽고 간편한 테스트와 벤치마크를 제공합니다. 이 항목에서는 간단하게 소수판별 프로그램을 작성하며 golang의 테스트와 벤치마크를 사용해봅시다.
TDD(Test-Driven-Deleopment, 테스트 주도 개발) 절차에 따라 코드를 작성해 봅시다.
모듈 생성 프로젝트 디렉토리에서 터미널을 열고, go mod init {module 이름}을 입력합니다. 모듈이름은 prime으로 하겠습니다.
1 2  PS C:\dev\goproject\prime&amp;gt; go mod init prime go: creating new go.mod: module prime   go.mod 파일이 생성되었습니다.
test go 파일 생성/작성 test를 위한 go 파일은 이름이 _test.go로 끝나야 합니다.</description>
      </item>
      
      <item>
        <title>(1)-2 : golang test</title>
        <link>https://lyra95.github.io/docs/go/go-test-2/</link>
        <pubDate>Sun, 25 Apr 2021 18:18:20 +0900</pubDate>
        
        <guid>https://lyra95.github.io/docs/go/go-test-2/</guid>
        <description>테스트 여러개 생성 그냥 Test 함수를 여러개 작성하면 됩니다.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  // prime_test.go func TestPrimeZero(t *testing.T) { result := prime(0) if result != 0 { t.Errorf(&amp;#34;prime(0) should be 0 but prime(0) returns %d&amp;#34;, result) } } func TestPrimeNegative(t *testing.T) { result := prime(-100) if result !</description>
      </item>
      
      <item>
        <title>(2) : golang benchmark</title>
        <link>https://lyra95.github.io/docs/go/go-benchmark/</link>
        <pubDate>Sun, 25 Apr 2021 18:18:20 +0900</pubDate>
        
        <guid>https://lyra95.github.io/docs/go/go-benchmark/</guid>
        <description>Golang은 벤치마크 기능을 지원합니다. 테스트와 마찬가지로
   _test.go로 끝나는 파일에    testing 패키지를 임포트하고    func BenchmarkXxxx(b *testing.B) 형태로 함수를 작성하면 됩니다.    한 번 작성해 봅시다. (소스코드는 이전 포스트의 n이하의 소수의 개수를 리턴하는 함수 prime(n)를 참고하세요.)
1 2 3 4 5 6 7 8 9 10  // prime_test.go package main import &amp;#34;testing&amp;#34; func BenchmarkPrime(b *testing.B) { for i := 0; i &amp;lt; b.</description>
      </item>
      
    
  </channel>
</rss>